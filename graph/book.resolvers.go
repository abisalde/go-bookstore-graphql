package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"strconv"

	"github.com/abisalde/go-bookstore-graphql/ent"
	"github.com/abisalde/go-bookstore-graphql/graph/internal/model"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.BookInput) (*ent.Book, error) {
	return r.client.
		Book.
		Create().
		SetName(input.Name).
		SetAuthor(input.Author).
		SetPublication(input.Publication).
		SaveX(ctx), nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, input model.BookInput) (*ent.Book, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.client.Book.
		UpdateOneID(idInt).
		SetName(input.Name).
		SetAuthor(input.Author).
		SetPublication(input.Publication).
		Save(ctx)
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.client.Book.
		DeleteOneID(idInt).
		Exec(ctx)
	return err == nil, err
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*ent.Book, error) {
	return r.client.Book.Query().All(ctx)
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*ent.Book, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.client.Book.Get(ctx, idInt)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
