// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"github.com/abisalde/go-bookstore-graphql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldName, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// Publication applies equality check predicate on the "publication" field. It's identical to PublicationEQ.
func Publication(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublication, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldName, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthor, v))
}

// PublicationEQ applies the EQ predicate on the "publication" field.
func PublicationEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublication, v))
}

// PublicationNEQ applies the NEQ predicate on the "publication" field.
func PublicationNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublication, v))
}

// PublicationIn applies the In predicate on the "publication" field.
func PublicationIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublication, vs...))
}

// PublicationNotIn applies the NotIn predicate on the "publication" field.
func PublicationNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublication, vs...))
}

// PublicationGT applies the GT predicate on the "publication" field.
func PublicationGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublication, v))
}

// PublicationGTE applies the GTE predicate on the "publication" field.
func PublicationGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublication, v))
}

// PublicationLT applies the LT predicate on the "publication" field.
func PublicationLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublication, v))
}

// PublicationLTE applies the LTE predicate on the "publication" field.
func PublicationLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublication, v))
}

// PublicationContains applies the Contains predicate on the "publication" field.
func PublicationContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPublication, v))
}

// PublicationHasPrefix applies the HasPrefix predicate on the "publication" field.
func PublicationHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPublication, v))
}

// PublicationHasSuffix applies the HasSuffix predicate on the "publication" field.
func PublicationHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPublication, v))
}

// PublicationEqualFold applies the EqualFold predicate on the "publication" field.
func PublicationEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPublication, v))
}

// PublicationContainsFold applies the ContainsFold predicate on the "publication" field.
func PublicationContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPublication, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
